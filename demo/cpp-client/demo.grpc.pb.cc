// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: demo.proto

#include "demo.pb.h"
#include "demo.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace demo {

static const char* Greeter_method_names[] = {
  "/demo.Greeter/SignUP",
  "/demo.Greeter/SignIn",
};

std::unique_ptr< Greeter::Stub> Greeter::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Greeter::Stub> stub(new Greeter::Stub(channel));
  return stub;
}

Greeter::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SignUP_(Greeter_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SignIn_(Greeter_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Greeter::Stub::SignUP(::grpc::ClientContext* context, const ::demo::DemoRequest& request, ::demo::DemoReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SignUP_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::demo::DemoReply>* Greeter::Stub::AsyncSignUPRaw(::grpc::ClientContext* context, const ::demo::DemoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::demo::DemoReply>::Create(channel_.get(), cq, rpcmethod_SignUP_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::DemoReply>* Greeter::Stub::PrepareAsyncSignUPRaw(::grpc::ClientContext* context, const ::demo::DemoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::demo::DemoReply>::Create(channel_.get(), cq, rpcmethod_SignUP_, context, request, false);
}

::grpc::Status Greeter::Stub::SignIn(::grpc::ClientContext* context, const ::demo::DemoRequest& request, ::demo::DemoReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SignIn_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::demo::DemoReply>* Greeter::Stub::AsyncSignInRaw(::grpc::ClientContext* context, const ::demo::DemoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::demo::DemoReply>::Create(channel_.get(), cq, rpcmethod_SignIn_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::DemoReply>* Greeter::Stub::PrepareAsyncSignInRaw(::grpc::ClientContext* context, const ::demo::DemoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::demo::DemoReply>::Create(channel_.get(), cq, rpcmethod_SignIn_, context, request, false);
}

Greeter::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::demo::DemoRequest, ::demo::DemoReply>(
          std::mem_fn(&Greeter::Service::SignUP), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::demo::DemoRequest, ::demo::DemoReply>(
          std::mem_fn(&Greeter::Service::SignIn), this)));
}

Greeter::Service::~Service() {
}

::grpc::Status Greeter::Service::SignUP(::grpc::ServerContext* context, const ::demo::DemoRequest* request, ::demo::DemoReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::SignIn(::grpc::ServerContext* context, const ::demo::DemoRequest* request, ::demo::DemoReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace demo

